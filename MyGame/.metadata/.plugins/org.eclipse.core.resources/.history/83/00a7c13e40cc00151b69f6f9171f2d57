package firstgame.main;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import javax.swing.JFrame;

public class Game extends Canvas implements Runnable{

	private static final long serialVersionUID = 8193488945243946202L;

	public static final int WIDTH = 900, HEIGHT = 675;
	
	private Thread thread;
	private boolean running = false;

	private Handler handler;
	private HUD hud;
	private Spawn spawner;
	private BulletController bulletCtrl;
	private static Player player;
	private Menu menu;
	private PauseMenu pauseMenu;
	private KeyInput keyInput;
	
	public enum STATE{
		Login,
		Menu,
		Settings,
		Difficulty,
		Game,
		Winner,
		Pause,
		End
	};
	
	public STATE gameState = STATE.Menu; // sets first state to Menu
	
	public enum DIFFICULTY{
		Easy,
		Medium,
		Hard
	};

	public DIFFICULTY difficulty = DIFFICULTY.Easy; // sets difficulty difficulty to easy
	
	public Game(){
		
		handler = new Handler(this); // initiates our handler that handles game objects
		bulletCtrl = new BulletController(); // initiates the bullet controller that handles creating and removing bullets
		player = new Player(WIDTH/2-32, HEIGHT/2-32,ID.Player, this, handler, bulletCtrl);	
		hud = new HUD(this);  // initiates Heads up display in game
		
		keyInput = new KeyInput(this, handler, player);
		this.addKeyListener(keyInput);  // handles and listens for key input
		
		menu = new Menu(this, handler, player, hud, bulletCtrl);
		this.addMouseListener(menu);
		
		pauseMenu = new PauseMenu(this);
		this.addMouseListener(pauseMenu);
	
		
		new Window(WIDTH, HEIGHT, "Zombies^2", this);  // creates window to view game
		
		new LoginDisplay();

		spawner = new Spawn(this, handler, hud, player);  // initiates spawner in game
		
	}
	
	public synchronized void start(){
		thread = new Thread(this);
		thread.start();
		running = true;
	}
	
	public synchronized void stop(){
		try{
			thread.join();
			running = false;
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void run(){
		this.requestFocus();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while(delta >= 1){
				tick();
				delta--;
			}
			if(running)
				render();
			frames++;
			
			if(System.currentTimeMillis() - timer > 1000){
				timer += 1000;
				System.out.println("FPS: " + frames);
				frames = 0;
			}
		}
		stop();
	}
	
	private void tick(){
		if(gameState == STATE.Game){
			bulletCtrl.tick();
			handler.tick();
			hud.tick();
			spawner.tick();

			
			// When a game over occurs
			if(HUD.HEALTH <= 0){
				gameState = STATE.End;
			}
		}
		else if(gameState == STATE.Menu || gameState == STATE.End || gameState == STATE.Settings || gameState == STATE.Winner){
			handler.tick();
			menu.tick();
		}
		else if(gameState == STATE.Pause){
			pauseMenu.tick();
			bulletCtrl.tick();
		}
	}
	
	// the order of the render changes what is seen on top vs what is seen behind
	public void render(){
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null){
			this.createBufferStrategy(3);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		
		g.setColor(Color.black);
		g.fillRect(0, 0, WIDTH, HEIGHT);
		
		if(gameState == STATE.Game){
			bulletCtrl.render(g);
			handler.render(g);
			hud.render(g);
			
			//goes through all game objects and checks if there's a Boss to render his health
			for(int i = 0; i < handler.object.size(); i++){ 
				GameObject tempObject = handler.object.get(i);
				if(tempObject.getId() == ID.EnemyBoss){
					hud.renderEnemy(g);
				}
			}
		}
		else if(gameState == STATE.End){
			handler.render(g);
			menu.render(g);
			
			//goes through all game objects and checks if there's a Boss to render his health
			for(int i = 0; i < handler.object.size(); i++){ 
				GameObject tempObject = handler.object.get(i);
				if(tempObject.getId() == ID.EnemyBoss){
					hud.renderEnemy(g);
				}
			}
		}
		else if(gameState == STATE.Menu || gameState == STATE.Settings || gameState == STATE.Difficulty || gameState == STATE.Winner){
			menu.render(g);
		}
		else if(gameState == STATE.Pause){
			pauseMenu.render(g);
		}
		
		g.dispose();
		bs.show();
	}
	
	public static float clamp(float var, float min, float max){  // restricts an item to be restricted to a minimum and maximum value.
		if(var >= max)
			return var = max;
		else if(var <= min)
			return var = min;
		else
			return var;
	}
	
	public static void main(String args[]){
		//LoginDisplay ld = new LoginDisplay();
		//ld.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//ld.setSize(400,400);
		//ld.setVisible(true);
		new Game();
	}	
}
