package firstgame.main;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Polygon;
//import java.awt.Graphics2D;  //Settingss show collision area around object
import java.awt.Rectangle;
import java.util.Random;

import firstgame.main.Game.DIFFICULTY;

public class EnemyBoss extends GameObject {
	
	private Handler handler;
	private Game game;
	private int timer = 30;
	private int timer2 = 50;
	private int timer3 = 100;
	Random r = new Random();
	
	//parameters that change based on difficulty
	private float bulletProbability = 1;
	private int smartEnemyCount = 1;
	
	public EnemyBoss(Game game,float x, float y, ID id, Handler handler) {
		super(x, y, id);
		
		this.handler = handler;
		this.game = game;
		
		velX = 0;
		velY = 1f;
		
		//parameters that change based on difficulty
		if(this.game.difficulty == DIFFICULTY.Easy){
			this.bulletProbability = 1;
			this.smartEnemyCount = 1;
		}
		else if(this.game.difficulty == DIFFICULTY.Medium){
			this.bulletProbability = .6f;
			this.smartEnemyCount = 3;
		}
		else if(this.game.difficulty == DIFFICULTY.Hard){
			this.bulletProbability = .35f;
			this.smartEnemyCount = 6;
		}
	}
	
	public Rectangle getBounds(){
		return new Rectangle((int)x-4,(int)y-4,39,39);  // bounds of Boss, boss is a 40 x 40 rectangle
	}


	public void tick() {
		x += velX;
		y += velY;
		
		if(timer > 0){
			
		}
		
		if(timer3 > 0) timer3--;
		
		if(timer <= 0) velY = 0;
		else timer--;
		
		if(timer <= 0) timer2--;
		if(timer2 <= 0){
			
			if(velX == 0) velX = 2.5f; //gets boss moving across the screen
			
			if(velX > 0)velX += .002f; //speeds up boss as time goes on
			else if (velX < 0)velX -= .002f; //speeds up boss as time goes on
			
			velX = Game.clamp(velX, -6f, 6f);
			
			int spawn = r.nextInt((int)(20*this.bulletProbability)); // probability set up to spawn normal enemies
			int spawnSmart = r.nextInt((int)(25*this.bulletProbability)); // probability set up to spawn smart enemies
			// two cases below are so that the spawning of bullets looks smooth based on the direction the boss is traveling
			if(velX > 0){
				if(spawn == 0) handler.addObject(new EnemyBossBullet((int)x+18, (int)y+35, ID.BasicEnemy, handler, this));
				
				// makes sure there's only one current smart enemy at a time
				if(spawnSmart == 0 && spawn == 0) {
					int count = 1;
					for(int i = 0; i < handler.object.size(); i++){ //goes through all game objects and checks if there's a smart enemy
						GameObject tempObject = handler.object.get(i);
						if(tempObject.getId() == ID.SmartEnemy){
							count++; 
						}
					}
					// if there's less than 4 smart enemies, create one
					if(count <= smartEnemyCount){ 
						handler.addObject(new SmartEnemy((int)x+18, (int)y+35, ID.SmartEnemy, handler));
					}
				}	
			}
			if(velX < 0){
				if(spawn == 0) handler.addObject(new EnemyBossBullet((int)x+2, (int)y+35, ID.EnemyBossBullet, handler, this));
				
				// makes sure there's only one current smart enemy at a time
				if(spawnSmart == 0 && spawn == 0){
					int count = 1;
					for(int i = 0; i < handler.object.size(); i++){ //goes through all game objects and checks if there's a smart enemy
						GameObject tempObject = handler.object.get(i);
						if(tempObject.getId() == ID.SmartEnemy){
							count++; 
						}
					}
					// if there's less than 4 enemies, create one
					if(count < smartEnemyCount){
						handler.addObject(new SmartEnemy((int)x+2, (int)y+35, ID.SmartEnemy, handler));
					}
				}
			}
		}
		
		if(x <= 0 || x >= Game.WIDTH - 39)  velX *= -1; //Restricts boss on both edges of the screen

	}


	public void render(Graphics g) {
		
		g.setColor(Color.black);
		g.fillRect((int)x, (int)y, 32, 32);
		
		//face
		g.setColor(Color.darkGray);
		g.drawRect((int)x-1, (int)y-1, 33, 33);
		g.drawRect((int)x, (int)y, 31, 31);
		g.drawRect((int)x-1, (int)y-1, 33, 33);
		g.drawRect((int)x-1, (int)y-1, 33, 33);
		g.drawRect((int)x-3, (int)y-3, 37, 37);
		g.drawRect((int)x-4, (int)y-4, 39, 39);
		g.setColor(Color.red);
		g.drawRect((int)x-2, (int)y-2, 35, 35);
		g.fillRect((int)x+7, (int)y+7, 6, 6);
		g.fillRect((int)x+19, (int)y+7, 6, 6);
		g.fillRect((int)x+6, (int)y+21, 20, 4);
		
		
		//Graphics2D g2d = (Graphics2D) g;		
		//The below code shows the bounds of the area designated as the collision area for the enemy 
		//g.setColor(Color.green);
		//g2d.draw(getBounds());

	}

	public int getTimer3(){
		return timer3;
	}
	
}
