package firstgame.main;

import java.awt.Color;
import java.awt.Graphics;
//import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import firstgame.main.Game.DIFFICULTY;
import firstgame.main.Game.STATE;

public class Player extends GameObject {

	Timer timer = new Timer();
	Random r = new Random();
	private Handler handler;
	private Game game;
	private boolean L; //True if Left, False if Right
	private long fireRate = 325;	// fireRate is in terms of milliseconds
	private int fireRateLevel = 0;
	private BulletController c;
	private float damageDealer = 1;
	private int speedLevel = 5;
	private float speed = 5;
	private int bombLevel;
	
	public Player(int x, int y, ID id, Game game, Handler handler, BulletController c, int fireRateLevel, int speedLevel, int bombLevel) {
		super(x, y, id);
		this.game = game;
		this.handler = handler;
		this.c = c;
		this.fireRateLevel = fireRateLevel;
		this.speedLevel = speedLevel;
		this.bombLevel = bombLevel;
		
		if(this.game.difficulty == DIFFICULTY.Easy){
			this.damageDealer = 1;
		}
		else if(this.game.difficulty == DIFFICULTY.Medium){
			this.damageDealer = 1.5f;
		}
		else if(this.game.difficulty == DIFFICULTY.Hard){
			this.damageDealer = 2f;
		}
		
		if(fireRateLevel == 0){
			fireRate = 325;
		}
		else if(fireRateLevel == 1){
			fireRate = 300;
		}
		else if(fireRateLevel == 2){
			fireRate = 275;
		}
		else if(fireRateLevel == 3){
			fireRate = 325;
		}
		else if(fireRateLevel == 4){
			fireRate = 300;
		}
		else if(fireRateLevel == 5){
			fireRate = 325;
		}
		
		if(speedLevel == 0){
			speed = 5F;
		}
		else if(speedLevel == 1){
			speed = 5.3F;
		}
		else if(speedLevel == 2){
			speed = 5.6F;
		}
		else if(speedLevel == 3){
			speed = 5.9F;
		}
		else if(speedLevel == 4){
			speed = 6.2F;
		}
		else if(speedLevel == 5){
			speed = 6.5F;
		}		
	}

	
	public int getFireRateLevel() {
		return fireRateLevel;
	}

	public void setFireRateLevel(int fireRateLevel) {
		this.fireRateLevel = fireRateLevel;
	}

	public int getSpeedLevel() {
		return speedLevel;
	}

	public void setSpeedLevel(int speedLevel) {
		if(speedLevel == 0){
			speed = 5F;
		}
		else if(speedLevel == 1){
			speed = 5.3F;
		}
		else if(speedLevel == 2){
			speed = 5.6F;
		}
		else if(speedLevel == 3){
			speed = 5.9F;
		}
		else if(speedLevel == 4){
			speed = 6.2F;
		}
		else if(speedLevel == 5){
			speed = 6.5F;
		}		
		
		this.speedLevel = speedLevel;
	}

	public int getBombLevel() {
		return bombLevel;
	}

	public void setBombLevel(int bombLevel) {
		this.bombLevel = bombLevel;
	}

	public float getSpeed() {
		return speed;
	}

	public void setSpeed(float speed) {
		this.speed = speed;
	}

	
	public Rectangle getBounds(){
		return new Rectangle((int)x,(int)y-10,13,34);  //32 x 32 is the bounds of the player, adjust this for my specs of player
	}
	
	public void tick() {
		x += velX;
		y += velY;
		
		x = Game.clamp((int)x, 0, Game.WIDTH - 18);   // sets boundaries for player
		y = Game.clamp((int)y, 9, Game.HEIGHT - 53);  // sets boundaries for player
		
		collision();
	}
	

	private void collision(){
		for(int i = 0; i < handler.object.size(); i++){
			
			GameObject tempObject = handler.object.get(i);
			
			if(tempObject.getId() == ID.BasicEnemy || tempObject.getId() == ID.FastEnemy || tempObject.getId() == ID.SmartEnemy || tempObject.getId() == ID.BlinkingEnemy){ // temp object is a BasicEnemy, FastEnemy, or SmartEnemy
				if(getBounds().intersects(tempObject.getBounds())){ // if collision occurs
					HUD.HEALTH -= 12*damageDealer;
					handler.removeObject(tempObject);
				}
			}
			
			if(tempObject.getId() == ID.EnemyBoss){
				if(getBounds().intersects(tempObject.getBounds())){ // if collision occurs with boss
					HUD.HEALTH -= 2;
				}
			}	
			
			if(tempObject.getId() == ID.HealthRegenerator){
				if(getBounds().intersects(tempObject.getBounds())){
					HUD.HEALTH += 25;
					handler.removeObject(tempObject);
				}
			}
			
			if(tempObject.getId() == ID.Bomb){
				if(getBounds().intersects(tempObject.getBounds())){
					Bomb bomb = (Bomb) tempObject;
					if(!bomb.isBombDeployed()){
						HUD.bombCount++;
						handler.removeObject(tempObject);
					}
				}
			}
		}
	}
	
	public void render(Graphics g) {		
		
		g.setColor(Color.lightGray);
		g.fillRect((int)x, (int)y, 13, 24);
		g.fillOval((int)x+1, (int)y - 10, 10, 10);
		
		
		// Left Arm
		g.setColor(Color.darkGray);
		g.fillRect((int)x+2, (int)y+2, 2, 10);
		g.fillRect((int)x, (int)y+10, 2, 2);
	
		// Right Arm
		g.fillRect((int)x+8, (int)y+2, 2, 10);
		g.fillRect((int)x+10, (int)y+10, 3, 2);
		
		// Legs
		g.fillRect((int)x+5, (int)y+14, 2, 10);
		g.setColor(Color.black);
		g.fillRect((int)x, (int)y+12, 1, 13);
		g.fillRect((int)x+12, (int)y+12, 2, 13);
		
		// Guns
			g.setColor(Color.blue);
		// Left Gun
			if (velX != 0){
				if(velX < 0){
					g.fillRect((int)x-5, (int)y+7, 3, 5);
					g.fillRect((int)x-11, (int)y+4, 12, 3);
					L = true;
					}
			//Right Gun
				else if(velX > 0){
					g.fillRect((int)x+13, (int)y+7, 3, 5);
					g.fillRect((int)x+12, (int)y+4, 12, 3);
					L = false;
				}	
			}
			else{
				if(L == true){ // Left Gun
					g.fillRect((int)x-5, (int)y+7, 3, 5);
					g.fillRect((int)x-11, (int)y+4, 12, 3);
				}
				else{	// Right Gun
					g.fillRect((int)x+13, (int)y+7, 3, 5);
					g.fillRect((int)x+12, (int)y+4, 12, 3);
				}
			}
			
			//The below code shows the bounds of the area designated as the collision area for the enemy
			//Graphics2D g2d = (Graphics2D) g; 
			//g.setColor(Color.green);
			//g2d.draw(getBounds());
		}	
	
	public void automatedBullets(){
		Player player = this;
		
		if(fireRateLevel == 0 || fireRateLevel == 1 || fireRateLevel == 2){
		//makes a new bullet every 'fireRate' seconds
		timer.scheduleAtFixedRate(new TimerTask() {
			  public void run() {				  
				  c.addBullet(new Bullet((int)player.x + 4, (int)player.y + 3, ID.Bullet, game, handler, player, c, 0));
			  }
			}, 500L, fireRate); 
		}
		else if(fireRateLevel == 3 || fireRateLevel == 4){
			//makes a new bullet every 'fireRate' seconds
			timer.scheduleAtFixedRate(new TimerTask() {
				  public void run() {
						c.addBullet(new Bullet((int)player.x + 4, (int)player.y + 3, ID.Bullet, game, handler, player, c, -.35F));
						c.addBullet(new Bullet((int)player.x + 4, (int)player.y + 3, ID.Bullet, game, handler, player, c, .35F));
				  }
				}, 500L, fireRate); 
		}
		else if(fireRateLevel == 5){
			//makes a new bullet every 'fireRate' seconds
			timer.scheduleAtFixedRate(new TimerTask() {
				  public void run() {				  
						c.addBullet(new Bullet((int)player.x + 4, (int)player.y + 3, ID.Bullet, game, handler, player, c, -.5F));
					    c.addBullet(new Bullet((int)player.x + 4, (int)player.y + 3, ID.Bullet, game, handler, player, c, 0));
						c.addBullet(new Bullet((int)player.x + 4, (int)player.y + 3, ID.Bullet, game, handler, player, c, .5F));
				  }
				}, 500L, fireRate); 
		}
		
		
	}
	
	public void deployBomb(){
		Player player = this;
		Bomb deployedBomb = new Bomb((int)player.x, (int) player.y, ID.Bomb, handler, bombLevel);
		handler.addObject(deployedBomb);
		deployedBomb.setBombDeployed(true);
		--HUD.bombCount;
		
		deployedBomb.explosionTime(deployedBomb);
	}

	
}
	
	


