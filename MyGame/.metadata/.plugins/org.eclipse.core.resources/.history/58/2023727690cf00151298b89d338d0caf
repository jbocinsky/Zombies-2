package firstgame.main;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Arrays;
import java.util.List;

import javax.swing.JFrame;

public class Game extends Canvas implements Runnable{

	private static final long serialVersionUID = 8193488945243946202L;

	public static final int WIDTH = 900, HEIGHT = 675;
	
	private Thread thread;
	private boolean running = false;

	private Handler handler;
	private HUD hud;
	private Spawn spawner;
	private BulletController bulletCtrl;
	private Player player;
	private Menu menu;
	private UpgradeMenu upgradeMenu;
	private KeyInput keyInput;
	private Window window;
	private static String fileName = "GameDataBase.txt";
	private String userName = "";
	private String passWord = "";
	private int speedLevel = 0;
	private int healthLevel = 0;
	private int fireRateLevel = 0;
	private int bombLevel = 0;
	private int money = 0;
	
	public enum STATE{
		Login,
		Menu,
		Settings,
		Difficulty,
		Game,
		Winner,
		Pause,
		Upgrade,
		End
	};
	
	public STATE gameState = STATE.Menu; // sets first state to Menu
	
	public enum DIFFICULTY{
		Easy,
		Medium,
		Hard
	};

	public DIFFICULTY difficulty = DIFFICULTY.Easy; // sets difficulty difficulty to easy
	
	public Game(String userName, String passWord, int speedLevel, int healthLevel, int fireRateLevel, int bombLevel, int money){
		//sets the following values based on the logged in user, from here these values are handled internally
		this.userName = userName;
		this.passWord = passWord;
		this.speedLevel = speedLevel;
		this.healthLevel = healthLevel;
		this.fireRateLevel = fireRateLevel;
		this.bombLevel = bombLevel;
		this.money = money;
		
		handler = new Handler(this); // initiates our handler that handles game objects
		bulletCtrl = new BulletController(); // initiates the bullet controller that handles creating and removing bullets
		player = new Player(WIDTH/2-32, HEIGHT/2-32,ID.Player, this, handler, bulletCtrl, fireRateLevel, speedLevel, bombLevel);	
		hud = new HUD(this, healthLevel);  // initiates Heads up display in game
		
		keyInput = new KeyInput(this, handler, player);
		this.addKeyListener(keyInput);  // handles and listens for key input
		
		menu = new Menu(this, handler, player, hud, bulletCtrl, bombLevel);
		this.addMouseListener(menu);
		
		upgradeMenu = new UpgradeMenu(this, player);
		this.addMouseListener(upgradeMenu);
		
		window = new Window(WIDTH, HEIGHT, "Zombies^2", this);  // creates window to view game

		spawner = new Spawn(this, handler, hud, player, bombLevel);  // initiates spawner in game
		
	}	
	
	public Handler getHandler() {
		return handler;
	}

	public void setHandler(Handler handler) {
		this.handler = handler;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getPassWord() {
		return passWord;
	}

	public void setPassWord(String passWord) {
		this.passWord = passWord;
	}

	public int getSpeedLevel() {
		return speedLevel;
	}

	public void setSpeedLevel(int speedLevel) {
		this.speedLevel = speedLevel;
	}

	public int getHealthLevel() {
		return healthLevel;
	}

	public void setHealthLevel(int healthLevel) {
		this.healthLevel = healthLevel;
	}

	public int getFireRateLevel() {
		return fireRateLevel;
	}

	public void setFireRateLevel(int fireRateLevel) {
		this.fireRateLevel = fireRateLevel;
	}

	public int getBombLevel() {
		return bombLevel;
	}

	public void setBombLevel(int bombLevel) {
		this.bombLevel = bombLevel;
	}

	public int getMoney() {
		return money;
	}

	public void setMoney(int money) {
		this.money = money;
	}
	
	

	public BulletController getBulletCtrl() {
		return bulletCtrl;
	}

	public void setBulletCtrl(BulletController bulletCtrl) {
		this.bulletCtrl = bulletCtrl;
	}

	public synchronized void start(){
		thread = new Thread(this);
		thread.start();
		running = true;
	}
	
	public synchronized void stop(){
		try{
			thread.join();
			running = false;
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void run(){
		this.requestFocus();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while(delta >= 1){
				tick();
				delta--;
			}
			if(running)
				render();
			frames++;
			
			if(System.currentTimeMillis() - timer > 1000){
				timer += 1000;
				//System.out.println("FPS: " + frames);
				frames = 0;
			}
		}
		stop();
	}
	
	private void tick(){
		if(gameState == STATE.Game){
			bulletCtrl.tick();
			handler.tick();
			hud.tick();
			spawner.tick();

			
			// When a game over occurs
			if(HUD.HEALTH <= 0){
				gameState = STATE.End;
			}
		}
		else if(gameState == STATE.Menu || gameState == STATE.End || gameState == STATE.Settings || gameState == STATE.Winner || gameState == STATE.Pause){
			handler.tick();
			menu.tick();
		}
		else if(gameState == STATE.Upgrade){
			upgradeMenu.tick();
			bulletCtrl.tick();
		}
	}
	
	// the order of the render changes what is seen on top vs what is seen behind
	public void render(){
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null){
			this.createBufferStrategy(3);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		
		g.setColor(Color.black);
		g.fillRect(0, 0, WIDTH, HEIGHT);
		
		if(gameState == STATE.Game){
			bulletCtrl.render(g);
			handler.render(g);
			hud.render(g);
			
			//goes through all game objects and checks if there's a Boss to render his health
			for(int i = 0; i < handler.object.size(); i++){ 
				GameObject tempObject = handler.object.get(i);
				if(tempObject.getId() == ID.EnemyBoss){
					hud.renderEnemy(g);
				}
			}
		}
		else if(gameState == STATE.End){
			handler.render(g);
			menu.render(g);
			
			//goes through all game objects and checks if there's a Boss to render his health
			for(int i = 0; i < handler.object.size(); i++){ 
				GameObject tempObject = handler.object.get(i);
				if(tempObject.getId() == ID.EnemyBoss){
					hud.renderEnemy(g);
				}
			}
		}
		else if(gameState == STATE.Menu || gameState == STATE.Settings || gameState == STATE.Difficulty || gameState == STATE.Winner || gameState == STATE.Pause){
			menu.render(g);
		}
		else if(gameState == STATE.Upgrade){
			upgradeMenu.render(g);
		}
		
		g.dispose();
		bs.show();
	}
	
	public static float clamp(float var, float min, float max){  // restricts an item to be restricted to a minimum and maximum value.
		if(var >= max)
			return var = max;
		else if(var <= min)
			return var = min;
		else
			return var;
	}
	
	public static void main(String args[]){
		//creates database file for login if it does not exist
		File file = new File(fileName);
		if(!file.exists()){
			Charset utf8 = StandardCharsets.UTF_8;
			List<String> firstLine = Arrays.asList("The following are user names and passwords followed by that user's level in speed, health, fire rate, bomb radius, and money"); //creates file for the first time with nothing in it
			try {
			    Files.write(Paths.get(fileName), firstLine, utf8,StandardOpenOption.CREATE, StandardOpenOption.APPEND);
			} catch (IOException ex) {
			    ex.printStackTrace();
			}
		}
		    
		
		//displays login screen when game is ran
		int width = 250;
		int height = 200;
		LoginDisplay ld = new LoginDisplay();
		
		ld.setPreferredSize(new Dimension(width,height));
		ld.setMaximumSize(new Dimension(width,height));
		ld.setMinimumSize(new Dimension(width,height));
		ld.setResizable(false);
		
	    ld.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    ld.setLocationRelativeTo(null);	
	    ld.setVisible(true);
	}
}
